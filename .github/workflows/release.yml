name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build-release:
    name: Build Release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ''
            archive_ext: '.tar.gz'
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            suffix: ''
            archive_ext: '.tar.gz'
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: ''
            archive_ext: '.tar.gz'
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: ''
            archive_ext: '.tar.gz'
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: '.exe'
            archive_ext: '.zip'

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl tools (Linux musl only)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get install -y musl-tools

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Build CLI binary
        run: cargo build --release --target ${{ matrix.target }} -p saorsa-gossip

      - name: Build Coordinator binary
        run: cargo build --release --target ${{ matrix.target }} -p saorsa-coordinator

      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../saorsa-gossip-${{ matrix.target }}${{ matrix.archive_ext }} \
            saorsa-gossip${{ matrix.suffix }} \
            saorsa-gossip-coordinator${{ matrix.suffix }}

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../saorsa-gossip-${{ matrix.target }}${{ matrix.archive_ext }} `
            saorsa-gossip${{ matrix.suffix }} `
            saorsa-gossip-coordinator${{ matrix.suffix }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: saorsa-gossip-${{ matrix.target }}
          path: |
            saorsa-gossip-${{ matrix.target }}${{ matrix.archive_ext }}
            target/${{ matrix.target }}/release/saorsa-gossip${{ matrix.suffix }}
            target/${{ matrix.target }}/release/saorsa-gossip-coordinator${{ matrix.suffix }}

  create-release:
    name: Create Release
    needs: build-release
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
